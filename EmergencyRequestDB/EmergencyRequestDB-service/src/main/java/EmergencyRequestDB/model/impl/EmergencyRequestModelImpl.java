/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package EmergencyRequestDB.model.impl;

import EmergencyRequestDB.model.EmergencyRequest;
import EmergencyRequestDB.model.EmergencyRequestModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the EmergencyRequest service. Represents a row in the &quot;Fire_EmergencyRequest&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>EmergencyRequestModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EmergencyRequestImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see EmergencyRequestImpl
 * @generated
 */
@JSON(strict = true)
public class EmergencyRequestModelImpl
	extends BaseModelImpl<EmergencyRequest> implements EmergencyRequestModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a emergency request model instance should use the <code>EmergencyRequest</code> interface instead.
	 */
	public static final String TABLE_NAME = "Fire_EmergencyRequest";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"requestId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"requestTitle", Types.VARCHAR}, {"description", Types.VARCHAR},
		{"location", Types.VARCHAR}, {"exactAddress", Types.VARCHAR},
		{"contactNumber", Types.BIGINT}, {"attachmentPath", Types.VARCHAR},
		{"status", Types.VARCHAR}, {"allocatedTeamId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("requestId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("requestTitle", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("location", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("exactAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("contactNumber", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("attachmentPath", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("allocatedTeamId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table Fire_EmergencyRequest (uuid_ VARCHAR(75) null,requestId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,requestTitle VARCHAR(75) null,description VARCHAR(75) null,location VARCHAR(75) null,exactAddress VARCHAR(75) null,contactNumber LONG,attachmentPath VARCHAR(75) null,status VARCHAR(75) null,allocatedTeamId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table Fire_EmergencyRequest";

	public static final String ORDER_BY_JPQL =
		" ORDER BY emergencyRequest.requestId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY Fire_EmergencyRequest.requestId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long USERID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long REQUESTID_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public EmergencyRequestModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _requestId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setRequestId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _requestId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return EmergencyRequest.class;
	}

	@Override
	public String getModelClassName() {
		return EmergencyRequest.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<EmergencyRequest, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<EmergencyRequest, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<EmergencyRequest, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((EmergencyRequest)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<EmergencyRequest, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<EmergencyRequest, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(EmergencyRequest)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<EmergencyRequest, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<EmergencyRequest, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<EmergencyRequest, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<EmergencyRequest, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<EmergencyRequest, Object>>();

			attributeGetterFunctions.put("uuid", EmergencyRequest::getUuid);
			attributeGetterFunctions.put(
				"requestId", EmergencyRequest::getRequestId);
			attributeGetterFunctions.put(
				"groupId", EmergencyRequest::getGroupId);
			attributeGetterFunctions.put(
				"companyId", EmergencyRequest::getCompanyId);
			attributeGetterFunctions.put("userId", EmergencyRequest::getUserId);
			attributeGetterFunctions.put(
				"userName", EmergencyRequest::getUserName);
			attributeGetterFunctions.put(
				"createDate", EmergencyRequest::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", EmergencyRequest::getModifiedDate);
			attributeGetterFunctions.put(
				"requestTitle", EmergencyRequest::getRequestTitle);
			attributeGetterFunctions.put(
				"description", EmergencyRequest::getDescription);
			attributeGetterFunctions.put(
				"location", EmergencyRequest::getLocation);
			attributeGetterFunctions.put(
				"exactAddress", EmergencyRequest::getExactAddress);
			attributeGetterFunctions.put(
				"contactNumber", EmergencyRequest::getContactNumber);
			attributeGetterFunctions.put(
				"attachmentPath", EmergencyRequest::getAttachmentPath);
			attributeGetterFunctions.put("status", EmergencyRequest::getStatus);
			attributeGetterFunctions.put(
				"allocatedTeamId", EmergencyRequest::getAllocatedTeamId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<EmergencyRequest, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<EmergencyRequest, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<EmergencyRequest, ?>>();

			attributeSetterBiConsumers.put(
				"uuid",
				(BiConsumer<EmergencyRequest, String>)
					EmergencyRequest::setUuid);
			attributeSetterBiConsumers.put(
				"requestId",
				(BiConsumer<EmergencyRequest, Long>)
					EmergencyRequest::setRequestId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<EmergencyRequest, Long>)
					EmergencyRequest::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<EmergencyRequest, Long>)
					EmergencyRequest::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<EmergencyRequest, Long>)
					EmergencyRequest::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<EmergencyRequest, String>)
					EmergencyRequest::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<EmergencyRequest, Date>)
					EmergencyRequest::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<EmergencyRequest, Date>)
					EmergencyRequest::setModifiedDate);
			attributeSetterBiConsumers.put(
				"requestTitle",
				(BiConsumer<EmergencyRequest, String>)
					EmergencyRequest::setRequestTitle);
			attributeSetterBiConsumers.put(
				"description",
				(BiConsumer<EmergencyRequest, String>)
					EmergencyRequest::setDescription);
			attributeSetterBiConsumers.put(
				"location",
				(BiConsumer<EmergencyRequest, String>)
					EmergencyRequest::setLocation);
			attributeSetterBiConsumers.put(
				"exactAddress",
				(BiConsumer<EmergencyRequest, String>)
					EmergencyRequest::setExactAddress);
			attributeSetterBiConsumers.put(
				"contactNumber",
				(BiConsumer<EmergencyRequest, Long>)
					EmergencyRequest::setContactNumber);
			attributeSetterBiConsumers.put(
				"attachmentPath",
				(BiConsumer<EmergencyRequest, String>)
					EmergencyRequest::setAttachmentPath);
			attributeSetterBiConsumers.put(
				"status",
				(BiConsumer<EmergencyRequest, String>)
					EmergencyRequest::setStatus);
			attributeSetterBiConsumers.put(
				"allocatedTeamId",
				(BiConsumer<EmergencyRequest, Long>)
					EmergencyRequest::setAllocatedTeamId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getRequestId() {
		return _requestId;
	}

	@Override
	public void setRequestId(long requestId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_requestId = requestId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalUserId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("userId"));
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getRequestTitle() {
		if (_requestTitle == null) {
			return "";
		}
		else {
			return _requestTitle;
		}
	}

	@Override
	public void setRequestTitle(String requestTitle) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_requestTitle = requestTitle;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_description = description;
	}

	@JSON
	@Override
	public String getLocation() {
		if (_location == null) {
			return "";
		}
		else {
			return _location;
		}
	}

	@Override
	public void setLocation(String location) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_location = location;
	}

	@JSON
	@Override
	public String getExactAddress() {
		if (_exactAddress == null) {
			return "";
		}
		else {
			return _exactAddress;
		}
	}

	@Override
	public void setExactAddress(String exactAddress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_exactAddress = exactAddress;
	}

	@JSON
	@Override
	public long getContactNumber() {
		return _contactNumber;
	}

	@Override
	public void setContactNumber(long contactNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_contactNumber = contactNumber;
	}

	@JSON
	@Override
	public String getAttachmentPath() {
		if (_attachmentPath == null) {
			return "";
		}
		else {
			return _attachmentPath;
		}
	}

	@Override
	public void setAttachmentPath(String attachmentPath) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_attachmentPath = attachmentPath;
	}

	@JSON
	@Override
	public String getStatus() {
		if (_status == null) {
			return "";
		}
		else {
			return _status;
		}
	}

	@Override
	public void setStatus(String status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	@JSON
	@Override
	public long getAllocatedTeamId() {
		return _allocatedTeamId;
	}

	@Override
	public void setAllocatedTeamId(long allocatedTeamId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_allocatedTeamId = allocatedTeamId;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(EmergencyRequest.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), EmergencyRequest.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public EmergencyRequest toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, EmergencyRequest>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		EmergencyRequestImpl emergencyRequestImpl = new EmergencyRequestImpl();

		emergencyRequestImpl.setUuid(getUuid());
		emergencyRequestImpl.setRequestId(getRequestId());
		emergencyRequestImpl.setGroupId(getGroupId());
		emergencyRequestImpl.setCompanyId(getCompanyId());
		emergencyRequestImpl.setUserId(getUserId());
		emergencyRequestImpl.setUserName(getUserName());
		emergencyRequestImpl.setCreateDate(getCreateDate());
		emergencyRequestImpl.setModifiedDate(getModifiedDate());
		emergencyRequestImpl.setRequestTitle(getRequestTitle());
		emergencyRequestImpl.setDescription(getDescription());
		emergencyRequestImpl.setLocation(getLocation());
		emergencyRequestImpl.setExactAddress(getExactAddress());
		emergencyRequestImpl.setContactNumber(getContactNumber());
		emergencyRequestImpl.setAttachmentPath(getAttachmentPath());
		emergencyRequestImpl.setStatus(getStatus());
		emergencyRequestImpl.setAllocatedTeamId(getAllocatedTeamId());

		emergencyRequestImpl.resetOriginalValues();

		return emergencyRequestImpl;
	}

	@Override
	public EmergencyRequest cloneWithOriginalValues() {
		EmergencyRequestImpl emergencyRequestImpl = new EmergencyRequestImpl();

		emergencyRequestImpl.setUuid(
			this.<String>getColumnOriginalValue("uuid_"));
		emergencyRequestImpl.setRequestId(
			this.<Long>getColumnOriginalValue("requestId"));
		emergencyRequestImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		emergencyRequestImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		emergencyRequestImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		emergencyRequestImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		emergencyRequestImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		emergencyRequestImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		emergencyRequestImpl.setRequestTitle(
			this.<String>getColumnOriginalValue("requestTitle"));
		emergencyRequestImpl.setDescription(
			this.<String>getColumnOriginalValue("description"));
		emergencyRequestImpl.setLocation(
			this.<String>getColumnOriginalValue("location"));
		emergencyRequestImpl.setExactAddress(
			this.<String>getColumnOriginalValue("exactAddress"));
		emergencyRequestImpl.setContactNumber(
			this.<Long>getColumnOriginalValue("contactNumber"));
		emergencyRequestImpl.setAttachmentPath(
			this.<String>getColumnOriginalValue("attachmentPath"));
		emergencyRequestImpl.setStatus(
			this.<String>getColumnOriginalValue("status"));
		emergencyRequestImpl.setAllocatedTeamId(
			this.<Long>getColumnOriginalValue("allocatedTeamId"));

		return emergencyRequestImpl;
	}

	@Override
	public int compareTo(EmergencyRequest emergencyRequest) {
		long primaryKey = emergencyRequest.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof EmergencyRequest)) {
			return false;
		}

		EmergencyRequest emergencyRequest = (EmergencyRequest)object;

		long primaryKey = emergencyRequest.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<EmergencyRequest> toCacheModel() {
		EmergencyRequestCacheModel emergencyRequestCacheModel =
			new EmergencyRequestCacheModel();

		emergencyRequestCacheModel.uuid = getUuid();

		String uuid = emergencyRequestCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			emergencyRequestCacheModel.uuid = null;
		}

		emergencyRequestCacheModel.requestId = getRequestId();

		emergencyRequestCacheModel.groupId = getGroupId();

		emergencyRequestCacheModel.companyId = getCompanyId();

		emergencyRequestCacheModel.userId = getUserId();

		emergencyRequestCacheModel.userName = getUserName();

		String userName = emergencyRequestCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			emergencyRequestCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			emergencyRequestCacheModel.createDate = createDate.getTime();
		}
		else {
			emergencyRequestCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			emergencyRequestCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			emergencyRequestCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		emergencyRequestCacheModel.requestTitle = getRequestTitle();

		String requestTitle = emergencyRequestCacheModel.requestTitle;

		if ((requestTitle != null) && (requestTitle.length() == 0)) {
			emergencyRequestCacheModel.requestTitle = null;
		}

		emergencyRequestCacheModel.description = getDescription();

		String description = emergencyRequestCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			emergencyRequestCacheModel.description = null;
		}

		emergencyRequestCacheModel.location = getLocation();

		String location = emergencyRequestCacheModel.location;

		if ((location != null) && (location.length() == 0)) {
			emergencyRequestCacheModel.location = null;
		}

		emergencyRequestCacheModel.exactAddress = getExactAddress();

		String exactAddress = emergencyRequestCacheModel.exactAddress;

		if ((exactAddress != null) && (exactAddress.length() == 0)) {
			emergencyRequestCacheModel.exactAddress = null;
		}

		emergencyRequestCacheModel.contactNumber = getContactNumber();

		emergencyRequestCacheModel.attachmentPath = getAttachmentPath();

		String attachmentPath = emergencyRequestCacheModel.attachmentPath;

		if ((attachmentPath != null) && (attachmentPath.length() == 0)) {
			emergencyRequestCacheModel.attachmentPath = null;
		}

		emergencyRequestCacheModel.status = getStatus();

		String status = emergencyRequestCacheModel.status;

		if ((status != null) && (status.length() == 0)) {
			emergencyRequestCacheModel.status = null;
		}

		emergencyRequestCacheModel.allocatedTeamId = getAllocatedTeamId();

		return emergencyRequestCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<EmergencyRequest, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<EmergencyRequest, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<EmergencyRequest, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(EmergencyRequest)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, EmergencyRequest>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					EmergencyRequest.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _requestId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _requestTitle;
	private String _description;
	private String _location;
	private String _exactAddress;
	private long _contactNumber;
	private String _attachmentPath;
	private String _status;
	private long _allocatedTeamId;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<EmergencyRequest, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((EmergencyRequest)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("requestId", _requestId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("requestTitle", _requestTitle);
		_columnOriginalValues.put("description", _description);
		_columnOriginalValues.put("location", _location);
		_columnOriginalValues.put("exactAddress", _exactAddress);
		_columnOriginalValues.put("contactNumber", _contactNumber);
		_columnOriginalValues.put("attachmentPath", _attachmentPath);
		_columnOriginalValues.put("status", _status);
		_columnOriginalValues.put("allocatedTeamId", _allocatedTeamId);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("requestId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("userId", 16L);

		columnBitmasks.put("userName", 32L);

		columnBitmasks.put("createDate", 64L);

		columnBitmasks.put("modifiedDate", 128L);

		columnBitmasks.put("requestTitle", 256L);

		columnBitmasks.put("description", 512L);

		columnBitmasks.put("location", 1024L);

		columnBitmasks.put("exactAddress", 2048L);

		columnBitmasks.put("contactNumber", 4096L);

		columnBitmasks.put("attachmentPath", 8192L);

		columnBitmasks.put("status", 16384L);

		columnBitmasks.put("allocatedTeamId", 32768L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private EmergencyRequest _escapedModel;

}